---
name: "Invalid iteration of aggregate calls"
config:
  engine: "velocity"
  lint: True
  testFormat: "kotest"
  codePreamble: |-
    /**
      * This file has been auto-generated. 
      * See [https://github.com/FreshMag/collektive-plugin/blob/test/generated-cases/compiler-plugin-test/src/test/resources/yaml/IterationWithAggregate.yaml](here)
      * for details.
    */
    import it.unibo.collektive.aggregate.api.Aggregate
macros:
  - name: loop
    accepts: [code]
    values:
      - |-
         for(i in 1..3) {
           $code
         }
      - |- 
         (1..3).forEach {
           $code
         }
  - name: alignedOn
    accepts: [code]
    values:
      - |-
         alignedOn(0) {
           $code
         }
parameters:
  - name: "AGGREGATE"
    values: [ "neighboring(0)"]

# SUBJECTS
subjects:

# SIMPLE ITERATIONS
  - name: Iteration$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun Aggregate<Int>.entry() {
          #loop(
              $AGGREGATE
          )
      }
    outcomes:
      - warning: "Warning: aggregate function '${AGGREGATE}' called inside a loop with no manual alignment operation"

  - name: |-
      IterationExtAlign$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      #set($INNER = "#loop($AGGREGATE)")
      fun Aggregate<Int>.entry() {
          #alignedOn($INNER)
      }
    outcomes:
      - warning: "Warning: aggregate function '${AGGREGATE}' called inside a loop with no manual alignment operation"

  - name: IterationAlign$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      #set($INNER = "#alignedOn($AGGREGATE)")
      fun Aggregate<Int>.entry() {
          #loop( 
            $INNER
          ) 
      }
    outcomes: []

  - name: IterationWithNestedFun$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun Aggregate<Int>.entry() {
         #loop("
            fun Aggregate<Int>.nested() {
                $AGGREGATE
            }")
      }
    outcomes: []

# DELEGATES

  - name: IterationAlignDelegate$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      #set($INNER = "#alignedOn('delegate(this)')")
      fun delegate(aggregate: Aggregate<Int>) {
          aggregate.$AGGREGATE
      }

      fun Aggregate<Int>.entry() {
          #loop($INNER)
      }
    outcomes:
      - warning: "Warning: suspicious call of function '$AGGREGATE' with aggregate argument inside a loop with no 
      manual alignment operation"

  - name: IterationDelegateAlign$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
          aggregate.#alignedOn("aggregate.$AGGREGATE")
      }

      fun Aggregate<Int>.entry() {
         #loop('delegate(this)')
      }
    outcomes: []

  - name: IterationDelegate$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
          aggregate.$AGGREGATE
      }

      fun Aggregate<Int>.entry() {
          #loop("delegate(this)")
      }
    outcomes:
      - warning: "Warning: suspicious call of function '$AGGREGATE' with aggregate argument
      inside a loop with no manual alignment operation"

  - name: IterationDelegateWithNestedFun$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
          fun nested() {
            aggregate.$AGGREGATE
          }
      }

      fun Aggregate<Int>.entry() {
          #loop("delegate(this)")
      }
    outcomes: []

  - name: IterationRecursiveDelegate$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        delegate2(aggregate)
      }
      
      fun delegate2(aggregate: Aggregate<Int>) {
        aggregate.$AGGREGATE
      }

      fun Aggregate<Int>.entry() {
          #loop("delegate(this)")
      }
    outcomes:
      - warning: "Warning: suspicious call of function 'delegate' with aggregate argument
      inside a loop with no manual alignment operation"

  - name: IterationRecursiveDelegateAlign$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        delegate2(aggregate)
      }

      fun delegate2(aggregate: Aggregate<Int>) {
        aggregate.alignedOn(0) {
          aggregate.$AGGREGATE
        }
      }

      fun Aggregate<Int>.entry() {
          #loop("delegate(this)")
      }
    outcomes: []

  - name: IterationAlignRecursiveDelegate$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        aggregate.alignedOn(0) {
          delegate2(aggregate)
        }
      }

      fun delegate2(aggregate: Aggregate<Int>) {
          aggregate.$AGGREGATE
      }

      fun Aggregate<Int>.entry() {
          #loop("delegate(this)")
      }
    outcomes: [ ]

  - name: IterationDelegatedNestedFun$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        fun delegate2() {
          aggregate.$AGGREGATE
        }
        delegate2()
      }

      fun Aggregate<Int>.entry() {
          #loop("delegate(this)")
      }
    outcomes:
      - warning: "Warning: suspicious call of function 'delegate' with aggregate argument
      inside a loop with no manual alignment operation"

  - name: IterationDelegatedNestedFunAlign$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        fun delegate2() {
          aggregate.alignedOn(0) {
            aggregate.$AGGREGATE
          }
        }
        delegate2()
      }

      fun Aggregate<Int>.entry() {
          #loop("delegate(this)")
      }
    outcomes: []

  - name: IterationAlignDelegatedNestedFun$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      fun delegate(aggregate: Aggregate<Int>) {
        fun delegate2() {
          aggregate.$AGGREGATE
        }
        aggregate.alignedOn(0) {
          delegate2()
        }
      }

      fun Aggregate<Int>.entry() {
          #loop("delegate(this)")
      }
    outcomes: [ ]


# OUTSIDE

  - name: OutsideAggregate$util.prettify($AGGREGATE, "#loop($AGGREGATE)")
    code: |-
      import it.unibo.collektive.Collektive.Companion.aggregate
      
      fun entry() {
        #loop("
          aggregate(0) {
            $AGGREGATE
          }
        ")
      }
    outcomes: []
